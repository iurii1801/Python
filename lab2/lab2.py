# Задание № 1

# 1

# Создаем список значений
myList = [18, 20, 32, 18, 85, 78, 45.6]

# Выводим на экран первое и третье значение из списка
print("Первое значение:", myList[0])
print("Третье значение:", myList[2])

# Заменяем второе значение на 25
myList[1] = 25

# Выводим список после замены
print("Список после замены:", myList)

# Делаем срез элементов
srezList = myList[1:4]
print("Срез элементов:", srezList)

# Применяем Функции:

# len() для получения длины списка
listLength = len(myList)
print("Длина списка:", listLength)

# sorted() - сортируем элементы списка
sortedList = sorted(myList)
print("Отсортированный список:", sortedList)

# Методы:

# append() - добавляем новый элемент в конец списка
myList.append(65)
print("Список после добавления нового элемента:", myList)

# reverse() - разворачивает список
myList.reverse()
print("Развёрнутый список:", myList)

# count() - считает количество вхождений определенного элемента в списке
countNumber = myList.count(18)
print("Количество вхождений числа 18 в myList:",countNumber)



# 2

# Определение кортежа данных
myTuple = (23, 5, 63, 33, 54, 40)

# Вывод типа данных кортежа
print("Тип данных кортежа:", type(myTuple))

# Вывод первого и последнего значения кортежа
print("Первое значение кортежа:", myTuple[0])
print("Последнее значение кортежа:", myTuple[-1])

# Делаем срез элементов кортежа
srezTuple = myTuple[2:5]
print("Срез элементов кортежа:", srezTuple)

# Применяем Функции:

# len() - для получения длины кортежа
tupleLength = len(myTuple)
print("Длина кортежа:", tupleLength)

# max() - для нахождения максимального значения в кортеже
maxValue = max(myTuple)
print("Максимальное значение в кортеже:", maxValue)

# min() - для нахождения максимального значения в кортеже
mixValue = min(myTuple)
print("Минимальное значение в кортеже:", mixValue)



# 3

# Определение множества элементов
mySet = {4, 24, 53, 4, 6, 8, 53, 9, 8}

# Вывод всех элементов множества
print("Элементы множества:", mySet)

# В множестве mySet автоматически удалились повторяющиеся элементы (4 и 8)

# Применение Функции:

# len() - для получения количества элементов в множестве
setLength = len(mySet)
print("Количество элементов в множестве:", setLength)

# Методы:

# add() - для добавления нового элемента в множество
mySet.add(99)
print("Множество после добавления элемента:", mySet)

# discard() - удаляет указанный элемент из множества, если он присутствует.
mySet.discard(9)
print("Без удалённого элемента:", mySet)



# 4

# Создание словаря с текстовыми ключами
myDict1 = {"speciality": "Informatica",
           "Lesson": "Python",
           "name": "Iura"
           }

# Создание словаря с числовыми ключами
myDict2 = {1:18, 2:1, 3:2005}

# Вывод по 1-2 элементов из каждого словаря

print("Элементы словаря с текстовыми ключами:", myDict1['speciality'] )

print("Элементы словаря с числовыми ключами:", myDict2[3], myDict2[2] )

# Доступ к элементам словаря происходит по ключу.
# В Python доступ к элементам словаря осуществляется посредством оператора [] или метода get().
# Если ключ найден в словаре, операция [] возвращает соответствующее значение, иначе возникает ошибка KeyError.


# Применение Функций:

# len() возвращает количество элементов в словаре
lengthDict2 = len(myDict2)
print("Количество элементов в словаре с числовыми ключами:", lengthDict2)

# del удаляет элемент по ключу из словаря
del myDict1["Lesson"]
print("Словарь с текстовыми ключами после удаления элемента:", myDict1)

# Методы:

# pop() для удаления элемента из словаря по ключу
dictPop = myDict1.pop("speciality")
print("Словарь после удаления элемента:", myDict1)
print("Удаленное значение:", dictPop)

# keys() - возвращает представление всех ключей в словаре.
keysView = myDict2.keys()
print("Ключи в словаре 2:", keysView)

#values() - возвращает представление всех значений в словаре.
valuesView = myDict1.values()
print("Значение в словаре 1:", valuesView)



# 5

myList = [18, 20, 32, 18, 85, 78, 45.6]
# Преобразует список в словарь:
# Используем enumerate() для генерации пар ключ-значение
myDict3 = {index: value for index, value in enumerate(myList)}
print("Изменённый список в словарь", myDict3)

# Преобразование списка в словарь может быть полезным, когда нужно быстро получить доступ к элементам списка по их индексам.
# Например, если нужно получить элемент по его порядковому номеру или если есть список,
# в котором каждый элемент представляет собой какое-то значение с некоторым уникальным идентификатором (например, ID),
# то можно преобразовать этот список в словарь, где ключами будут идентификаторы, а значениями будут сами элементы списка.
# Это позволит быстро получать доступ к элементам по их идентификаторам.



# Задание № 2

# 1

# Создание списка из 3 числовых элементов (цены товаров)
prices = [536, 635.8, 70]

# Создание списка из 3 текстовых элементов (названия товаров)
products = ["Мяч RM", "Форма RM", "Гетры"]

# Создание информации о товарах с использованием метода format()

info = "Товар: {}, Цена: {} леев"

# Вывод информации на экран
print(info.format(products[0], prices[0]))
print(info.format(products[1], prices[1]))
print(info.format(products[2], prices[2]))



# 2

# Запрос у пользователя ввода возраста
ageInput = input("Введите ваш возраст: ")

# Преобразование в целое число
age = int(ageInput)

# Вычисление возраста через 5 лет
futureAge = age + 5

# Формирование строки с помощью оператора конкатенации и арифметических операторов
finalAge = "Через 5 лет вам будет " + str(futureAge) + " лет."

# Вывод результата на экран
print(finalAge)



# 3

# Здесь мы проверяем наличие символа "H" в строке "Hello, world!" с помощью оператора in
text = "Hello, world!"
print("H" in text)

# Проверяем, содержится ли число 18 в списке numbers с помощью оператора not in
numbers = [10, 52, 23, 44, 75]
print(18 not in numbers)
