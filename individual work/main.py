import telebot
from currency_converter import CurrencyConverter
from telebot import types

bot = telebot.TeleBot('7169851532:AAFJy2K2dWmrXtKOgyF18JtlcFgx8EPHJgc')
currency = CurrencyConverter()
amount = 0
income = 0
expenses = []

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Çüí∞', callback_data='convert_currency')
    btn2 = types.InlineKeyboardButton('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—é–¥–∂–µ—Ç–∞üìù', callback_data='budget_planner')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è biz –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –Ø —É–º–µ—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –±—é–¥–∂–µ—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['convert_currency', 'budget_planner', 'continue'])
def handle_choice(call):
    if call.data == 'convert_currency':
        start_currency_converter(call.message)
    elif call.data == 'budget_planner':
        start_budget_planner(call.message)
    elif call.data == 'continue':
        continue_currency_converter(call.message)

def start_currency_converter(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:')
    bot.register_next_step_handler(message, summa)

def summa(message):
    global amount
    try:
        amount = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É.')
        bot.register_next_step_handler(message, summa)
        return

    if amount > 0:
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('USD/GBP', callback_data='usd/gbp')
        btn2 = types.InlineKeyboardButton('EUR/BGN', callback_data='eur/bgn')
        btn3 = types.InlineKeyboardButton('EUR/USD', callback_data='eur/usd')
        btn4 = types.InlineKeyboardButton('–¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', callback_data='else')
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç.', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.')
        bot.register_next_step_handler(message, summa)

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data in ['usd/gbp', 'eur/bgn', 'eur/usd']:
        values = call.data.upper().split('/')
        res = currency.convert(amount, values[0], values[1])
        bot.send_message(call.message.chat.id, f'–ü–æ–ª—É—á–∞–µ—Ç—Å—è: {round(res, 2)}. –ú–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–ø–∏—Å–∞—Ç—å —Å—É–º–º—É.')

        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüí∞', callback_data='continue')
        btn2 = types.InlineKeyboardButton('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—é–¥–∂–µ—Ç–∞üìù', callback_data='budget_planner')
        markup.add(btn1, btn2)

        bot.send_message(call.message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=markup)
    elif call.data == 'else':
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–ª—ç—à.')
        bot.register_next_step_handler(call.message, my_currency)
    elif call.data == 'budget_planner':
        start_budget_planner(call.message)
    elif call.data == 'convert_currency':
        start_currency_converter(call.message)
    elif call.data in ['yes', 'no']:
        expense_choice(call)

def my_currency(message):
    try:
        values = message.text.upper().split('/')
        res = currency.convert(amount, values[0], values[1])
        bot.send_message(message.chat.id, f'–ü–æ–ª—É—á–∞–µ—Ç—Å—è: {round(res, 2)}. –ú–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–ø–∏—Å–∞—Ç—å —Å—É–º–º—É.')

        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüí∞', callback_data='continue')
        btn2 = types.InlineKeyboardButton('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—é–¥–∂–µ—Ç–∞üìù', callback_data='budget_planner')
        markup.add(btn1, btn2)

        bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=markup)
    except Exception:
        bot.send_message(message.chat.id,
                         '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –∑–∞–Ω–æ–≤–æ.')
        bot.register_next_step_handler(message, my_currency)

def continue_currency_converter(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:')
    bot.register_next_step_handler(message, summa)

def start_budget_planner(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ—Ö–æ–¥ –≤ EUR:')
    bot.register_next_step_handler(message, set_income)

def set_income(message):
    global income
    try:
        income = float(message.text.strip())
        bot.send_message(message.chat.id,
                         '–í–∞—à –¥–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–û–ø–∏—Å–∞–Ω–∏–µ: —Å—É–º–º–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ï–¥–∞: 50"):')
        bot.register_next_step_handler(message, add_expense)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')
        bot.register_next_step_handler(message, set_income)

def add_expense(message):
    global expenses
    try:
        description, amount = message.text.split(':')
        amount = float(amount.strip())
        expenses.append((description.strip(), amount))
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('–î–∞', callback_data='yes')
        btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no')
        btn3 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Çüí∞', callback_data='convert_currency')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, '–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ä–∞—Å—Ö–æ–¥?', reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id,
                         '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–û–ø–∏—Å–∞–Ω–∏–µ: —Å—É–º–º–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ï–¥–∞: 50").')
        bot.register_next_step_handler(message, add_expense)

def expense_choice(call):
    if call.data == 'yes':
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ —Ç–∞–∫–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ.')
        bot.register_next_step_handler(call.message, add_expense)
    elif call.data == 'no':
        calculate_balance(call.message)

def calculate_balance(message):
    total_expenses = sum(amount for description, amount in expenses)
    balance = income - total_expenses
    advice = '–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å –≤–∞—à–∏–º –±—é–¥–∂–µ—Ç–æ–ºüëç.' if balance >= 0 else '–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ãüìâ.'

    expense_details = '\n'.join([f'{description}: {amount}' for description, amount in expenses])
    response = (
        f'–í–∞—à –±—é–¥–∂–µ—Ç:\n–î–æ—Ö–æ–¥: {income} EUR\n\n–†–∞—Å—Ö–æ–¥—ã:\n{expense_details}\n\n–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses} EUR\n'
        f'–û—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å: {balance} EUR\n\n–°–æ–≤–µ—Ç: {advice}')

    bot.send_message(message.chat.id, response)

    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüìù', callback_data='budget_planner')
    btn2 = types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ãüí∞', callback_data='convert_currency')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=markup)

bot.polling(none_stop=True)
